#version 450

#define max_lod_count 5

layout (set=0, binding=0, std140) readonly uniform Camera
{
	mat4 projection;
	mat4 view;
	vec4 frustum_planes[6];
	vec4 position;
} camera;

layout (set=1, binding=0, std140)  buffer Entity
{
	mat4 model[];
};

struct INDIRECT_COMMAND 
{
	uint indexCount;
	uint instanceCount;
	uint firstVertex;
	uint firstInstance;
	uint lodIndex;
};

layout (set=2, binding=0, std430) writeonly buffer IndirectDraws
{
	INDIRECT_COMMAND indirect_draws[];
};

struct FRAME
{
	uint animation_id;
	uint frame_id;
};

layout (set=3, binding=0, std430) writeonly buffer Frame
{
	FRAME frames[];
};

struct ANIMATION
{
	uint frame_count;
	uint loop;
	uint play;
	uint duration;
	uint start;
	float speed;
};

layout (set=3, binding=1, std430) readonly buffer Animation
{
	ANIMATION animations[];
};

layout (set=3, binding=2) readonly uniform AnimationTimer
{
	uint time;
};

struct LOD
{
	uint first_vertex;
	uint vertex_count;
	float distance;
	float _pad0;
};

struct LOD_STACK
{
	LOD stack[max_lod_count];
};

layout (set=4, binding=0, std140) readonly buffer LodData
{
	LOD_STACK lod[];
};

bool InsideFrustum(vec4 pos, float radius)
{
	for(int i=0; i<6; i++)
		if(dot(pos, camera.frustum_planes[i]) + radius < 0.0) return false;
	return true;
}

void main()
{
	uint idx = gl_GlobalInvocationID.x;
	
	vec4 entity_positon = model[idx][3];
	if(!InsideFrustum(entity_positon, 2.0)) {
		indirect_draws[idx].instanceCount = 0;
	} else {
		indirect_draws[idx].instanceCount = 1;
		
		ANIMATION animation = animations[idx];
		if(animation.play > 0) {
			if(animation.loop > 0) {
			
				float progression = float(time - animation.start) / float(animation.duration) * animation.speed;
				uint last_frame_id = animation.frame_count - 1;
				frames[idx].frame_id = uint(mod(progression * last_frame_id, last_frame_id));
			}else{
			
				// TODO : Play animation once
				frames[idx].frame_id = 0;
			}
		}else{
		
			frames[idx].frame_id = animation.start;
		}
		
		uint lod_stack_id;
		if(distance(camera.position.xyz, entity_positon.xyz) < 15.0) lod_stack_id = 0;
		else if(distance(camera.position.xyz, entity_positon.xyz) < 40.0) lod_stack_id = 1;
		else if(distance(camera.position.xyz, entity_positon.xyz) < 100.0) lod_stack_id = 2;
		else lod_stack_id = 3;
		
		indirect_draws[idx].firstVertex = lod[indirect_draws[idx].lodIndex].stack[lod_stack_id].first_vertex;
		indirect_draws[idx].indexCount = lod[indirect_draws[idx].lodIndex].stack[lod_stack_id].vertex_count;
	}
}
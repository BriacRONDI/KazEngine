#version 450


layout (set=0, binding=0, std140) buffer Entity
{
	mat4 model[];
};

struct FRAME
{
	int animation_id;
	uint frame_id;
};

layout (set=0, binding=1, std430) writeonly buffer EntityFrame
{
	FRAME frame[];
};

struct ANIMATION
{
	uint frame_count;
	uint loop;
	uint play;
	uint duration;
	uint start;
	float speed;
};

layout (set=0, binding=2, std430) writeonly buffer EntityAnimation
{
	ANIMATION animation[];
};

struct MOVEMENT_DATA {
	vec2 destination;
	int moving;
	float radius;
	int grid_position[4];
	int skeleton_id;
	int padding[3];
};

layout (set=0, binding=3) buffer EntityMovement
{
	MOVEMENT_DATA movement[];
};

layout (set=1, binding=0) uniform GroupCount
{
	uint movement_group_count;
};

struct MOVEMENT_GROUP {
	vec2 destination;
	int scale;
	float unit_radius;
	int unit_count;
	uint fill_count;
	uint inside_count;
	uint padding;
};

layout (set=1, binding=1) buffer GroupData
{
	MOVEMENT_GROUP group[];
};

layout (set=2, binding=0) readonly uniform GlobalTime
{
	uint now;
	float delta;
}time;

struct BAKED_ANIMATION {
	int id;
	uint frame_count;
	uint duration_ms;
	uint padding;
};
			
struct TRIGGERED_ANIMATIONS {
	BAKED_ANIMATION idle;
	BAKED_ANIMATION move;
	BAKED_ANIMATION attack;
};

layout (set=3, binding=4) buffer SkeletonAnimations
{
	TRIGGERED_ANIMATIONS skeleton[];
};

void Move(uint entity_id)
{
	animation[entity_id].frame_count = skeleton[0].move.frame_count;
	animation[entity_id].duration = skeleton[0].move.duration_ms;
	animation[entity_id].loop = 1;
	animation[entity_id].play = 1;
	animation[entity_id].start = time.now;
	animation[entity_id].speed = 2.0;
	frame[entity_id].frame_id = 0;
	frame[entity_id].animation_id = skeleton[0].move.id;
}

void StopMoving(uint entity_id)
{
	animation[entity_id].frame_count = skeleton[0].idle.frame_count;
	animation[entity_id].duration = skeleton[0].idle.duration_ms;
	animation[entity_id].loop = 1;
	animation[entity_id].play = 1;
	animation[entity_id].start = time.now;
	animation[entity_id].speed = 1.0;
	frame[entity_id].frame_id = 0;
	frame[entity_id].animation_id = skeleton[0].idle.id;
}

void main()
{
	uint entity_id = gl_GlobalInvocationID.x;
	uint group_id = gl_GlobalInvocationID.y;
	
	if(entity_id == 0 && group[group_id].unit_count > 0) {
		if(group[group_id].fill_count >= group[group_id].unit_count) {
			atomicExchange(group[group_id].unit_count, 0);
		}else{
			uint max_count = 1;
			for(int i=1; i<group[group_id].scale; i++) max_count += i * 6;
			if(group[group_id].inside_count >= max_count) atomicAdd(group[group_id].scale, 1);
		}

		atomicExchange(group[group_id].fill_count, 0);
		atomicExchange(group[group_id].inside_count, 0);
	}
	
	float move_speed = 10.0;
	int gid = movement[entity_id].moving;
	if(gid < -1) gid = -gid - 2;
	
	if(group_id == gid) {
	
		if(group[gid].unit_count == 0) {
			movement[entity_id].moving = -1;
			StopMoving(entity_id);
			
		}else{
		
			if(movement[entity_id].moving >= 0) {
			
				if(model[entity_id][3].xz == movement[entity_id].destination) {
					if(group[gid].unit_count == 1) {
						atomicExchange(movement[entity_id].moving, -1);
						atomicExchange(group[gid].unit_count, 0);
						StopMoving(entity_id);
					}
				}else{
			
					vec2 direction = movement[entity_id].destination - model[entity_id][3].xz;
					vec2 unit_movement = normalize(direction) * move_speed * time.delta;
					
					if(length(unit_movement) >= length(direction)) {
						if(group[gid].unit_count == 1) {
							atomicExchange(movement[entity_id].moving, -1);
							atomicExchange(group[gid].unit_count, 0);
							StopMoving(entity_id);
						}
						model[entity_id][3].xz = movement[entity_id].destination;
					}else{
						model[entity_id][3].xz += unit_movement;
					}
				}
			}
			
			if(group[gid].unit_count > 1) {
				float group_radius = (2 * group[gid].scale - 1) * group[gid].unit_radius;
				vec2 segment = model[entity_id][3].xz - group[gid].destination;
				float distance_to_center = length(segment);
				if((distance_to_center + movement[entity_id].radius) <= group_radius) {
					atomicAdd(group[gid].fill_count, 1);
				}

				if((distance_to_center + movement[entity_id].radius) > group_radius) {
					if(movement[entity_id].moving < 0) {
						atomicExchange(movement[entity_id].moving, gid); //movement[entity_id].moving = gid;
						Move(entity_id);
					}
				} else {
					atomicExchange(movement[entity_id].moving, -gid - 2); //movement[entity_id].moving = -gid - 2;
					StopMoving(entity_id);
				}
			}
		}
	}
	
	if(group[group_id].unit_count > 1 && movement[entity_id].moving != -1) {
		float group_radius = (2 * group[group_id].scale - 1) * group[group_id].unit_radius;
		vec2 segment = model[entity_id][3].xz - group[group_id].destination;
		float distance_to_center = length(segment);
		if((distance_to_center - movement[entity_id].radius) <= group_radius) atomicAdd(group[group_id].inside_count, 1);
	}
}